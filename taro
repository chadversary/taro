#!/usr/bin/env python3

# Copyright 2012 Chad Versace <chad@chad-versace.us>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import configparser
import os
import stat
import sys
import textwrap as tw

link_names = [
    ".taro",
    "_taro",
    "+taro",
    ]

def fatal_error(message):
    print("taro: error: " + message)
    sys.stdout.flush()
    sys.exit(1)

def get_script_from_link(link_path):
    assert(os.path.isabs(link_path))

    if not os.path.exists(link_path):
        return None
    
    mode = os.stat(link_path).st_mode

    is_readable = mode & stat.S_IRUSR
    if not is_readable:
        return None

    is_executable = mode & stat.S_IXUSR
    if is_executable:
        return link_path

    # Assume that the link file is a Microsoft-style ini file.
    config = configparser.ConfigParser()

    try:
        config.read(link_path)
    except configparser.ParserError as error:
        fatal_error("failed to parse file '{0}': {1}".format(error))

    if not config.has_option("taro", "script"):
        fatal_error("config file '{0}' does not contain option 'taro:script'".format(link_path))

    script_path = config["taro"]["script"]

    if not os.path.isabs(script_path):
        link_dir = os.path.dirname(link_path)
        assert(os.path.isabs(link_dir))
        script_path = os.path.join(link_dir, script_path)
        script_path = os.path.normpath(script_path)

    return script_path

    
def find_taro_script(leaf_dir):
    path = os.path

    assert(path.isabs(leaf_dir))

    for name in link_names:
        link_path = path.join(leaf_dir, name)
        taro_script = get_script_from_link(link_path)
        if taro_script is not None:
            return taro_script

    if leaf_dir == "/":
        return None

    parent_dir = path.normpath(path.join(leaf_dir, os.pardir))
    return find_taro_script(parent_dir)

def main():
    if "TARO_PATH" in os.environ:
        taro_path = os.environ["TARO_PATH"]
        taro_path = os.path.normpath(taro_path)
        taro_path = os.path.expanduser(taro_path)
    else:
        taro_path = os.getcwd()

    taro_script = find_taro_script(taro_path)
    if taro_script is None:
        fatal_error("failed to find taro link (path={0})".format(taro_path))

    os.execv(taro_script, sys.argv)

if __name__ == "__main__":
    main()
