#!/usr/bin/env python3

# Copyright 2012 Chad Versace <chad@chad-versace.us>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import configparser
import os
import sys

def fatal_error(message):
    sys.stdout.write("taro: fatal: ")
    sys.stdout.write(message)
    sys.stdout.write("\n")
    sys.exit(1)

def find_taro_dir():
    cur_dir = os.getcwd()
    old_dir = None

    while cur_dir != '/' and cur_dir != old_dir:
        taro_dir = os.path.join(cur_dir, ".taro")
        if os.path.isdir(taro_dir):
            assert(os.path.isabs(taro_dir))
            return taro_dir
        else:
            old_dir = cur_dir
            cur_dir = os.path.dirname(cur_dir)

    fatal_error("not in a taro tree")

def find_taro_script(taro_dir):
    assert(os.path.isabs(taro_dir))

    config_filepath = os.path.join(taro_dir, "config")
    config = configparser.ConfigParser()

    try:
        config.read(config_filepath)
    except configparser.ConfigParser as error:
        fatal_error("failed to parse file {0!r} ({1})"\
                    .format(config_filepath, error))

    if not config.has_option("taro", "main"):
        fatal_error("config file {0!r} lacks option taro.main".format(config_filepath))

    taro_script = config["taro"]["main"]
    if not taro_script.startswith("/"):
        taro_root_dir = os.path.dirname(taro_dir)
        taro_script = os.path.join(taro_root_dir, taro_script)

    return taro_script

def main(args):
    taro_dir = find_taro_dir()
    taro_script = find_taro_script(taro_dir)
    real_args = [
        taro_script,
        "--taro-dir=" + taro_dir,
        "--",
        ]
    real_args.extend(args)

    try:
        os.execv(real_args[0], real_args)
    except OSError as error:
        fatal_error("failed to execute {0!r}: {1}".format(taro_script, error))

if __name__ == '__main__':
    main(sys.argv[1:])

# vim:ft=python:
